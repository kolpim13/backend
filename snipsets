@app.get("/members/get/info/{user_id}/{member_id}", response_model=Resp_MemberInfo)
def get_member_info(user_id: str,
                    member_id: str,
                    db: Session = Depends(utils.get_db_members)):
    
    # CheckValidate user who is making a request
    user: Member = utils.get_member_by_card_id(db, user_id)
    if user is None:
        raise HTTPException(status_code=400,
                            detail="No such token in member database")
    
    # Validate member`s card id is correct
    member: Member = utils.get_member_by_card_id(db, member_id)
    if member is None:
        raise HTTPException(status_code=400,
                            detail="Member ID was not found")
    
    # Validate if user can ask about another user based on the role
    if AccountType(user.account_type) not in [AccountType.ADMIN, AccountType.INSTRUCTOR]:
        raise HTTPException(status_code=401,
                            detail="User has no right get this information")
    
    if AccountType(user.account_type) is AccountType.INSTRUCTOR:
        if ((AccountType(member.account_type) is not AccountType.MEMBER) and
            (user.card_id != member.card_id)):
            raise HTTPException(status_code=401,
                            detail="User has no right get this information")
    
    return member


 resp = (
    # Specify tables
    db_checkins.query(
        CheckInEntry.instructor_name,
        CheckInEntry.instructor_surname,
        CheckInEntry.pass_type,
        func.count().label("count"),
    )
    # Filter them by data
    .filter(
        CheckInEntry.date_time >= req.date_time_min,
        CheckInEntry.date_time <= req.date_time_max,
    )
    # Return as (name, surname, pass_type, amount)
    .group_by(CheckInEntry.name, CheckInEntry.instructor_surname, CheckInEntry.pass_type)
    .all()
)